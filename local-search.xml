<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/25/C++%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/25/C++%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="宏定义-define-和常量-const-的区别"><a href="#宏定义-define-和常量-const-的区别" class="headerlink" title="宏定义 #define 和常量 const 的区别"></a>宏定义 #define 和常量 const 的区别</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// #define identifier value</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LENGTH 10 </span><br><br><span class="hljs-comment">// const type variable = value;</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>  LENGTH = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="类型和安全检查不同"><a href="#类型和安全检查不同" class="headerlink" title="类型和安全检查不同"></a><strong>类型和安全检查不同</strong></h3><p>宏定义是字符替换，没有数据类型的区别，同时这种替换没有类型安全检查，可能产生边际效应等错误；</p><p>const常量是常量的声明，有类型区别，需要在编译阶段进行类型检查</p><h3 id="编译器处理不同"><a href="#编译器处理不同" class="headerlink" title="编译器处理不同"></a><strong>编译器处理不同</strong></h3><p>宏定义是一个”编译时”概念，在预处理阶段展开，不能对宏定义进行调试，生命周期结束与编译时期；</p><p>const常量是一个”运行时”概念，在程序运行使用，类似于一个只读行数据</p><h3 id="存储方式不同"><a href="#存储方式不同" class="headerlink" title="存储方式不同"></a><strong>存储方式不同</strong></h3><p>宏定义是直接替换，不会分配内存，存储于程序的代码段中；</p><p>const常量需要进行内存分配，存储于程序的数据段中</p><h3 id="定义域不同"><a href="#定义域不同" class="headerlink" title="定义域不同"></a><strong>定义域不同</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> N 12</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> n <span class="hljs-number">12</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f2</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;N &lt;&lt;endl; <span class="hljs-comment">//正确，N已经定义过，不受定义域限制</span><br>    cout&lt;&lt;n &lt;&lt;endl; <span class="hljs-comment">//错误，n定义域只在f1函数中</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义后能否取消"><a href="#定义后能否取消" class="headerlink" title="定义后能否取消"></a><strong>定义后能否取消</strong></h3><p>宏定义可以通过#undef来使之前的宏定义失效</p><p>const常量定义后将在定义域内永久有效</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> N 12</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">12</span>;<br><br>  <span class="hljs-meta">#<span class="hljs-keyword">undef</span> N <span class="hljs-comment">//取消宏定义后，即使在f1函数中，N也无效了</span></span><br>  <span class="hljs-meta">#<span class="hljs-keyword">define</span> N 21<span class="hljs-comment">//取消后可以重新定义</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="是否可以做函数参数"><a href="#是否可以做函数参数" class="headerlink" title="是否可以做函数参数"></a><strong>是否可以做函数参数</strong></h3><p>宏定义不能作为参数传递给函数</p><p>const常量可以在函数的参数列表中出现</p><h2 id="string用法"><a href="#string用法" class="headerlink" title="string用法"></a>string用法</h2><p>C++中的string是可以当数组用的，下面的例子就演示了如何获取其中的指定字符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">string str=<span class="hljs-string">&quot;hello&quot;</span>;<br>cout&lt;&lt; str[<span class="hljs-number">1</span>]&lt;&lt;endl;  <span class="hljs-comment">//这个就获取并打印出了e</span><br>cout&lt;&lt; str.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>)&lt;&lt;endl; <span class="hljs-comment">//这样也能获取第0个字符h</span><br></code></pre></td></tr></table></figure><p>string对象重载了[]操作符，因此可以像一般的数组那样使用，举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str = <span class="hljs-string">&quot;Hello world&quot;</span>;<br>    str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;h&#x27;</span>;<br>    cout &lt;&lt; str &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符型数字变成相应的整型数字（如’2’变为2）"><a href="#字符型数字变成相应的整型数字（如’2’变为2）" class="headerlink" title="字符型数字变成相应的整型数字（如’2’变为2）"></a>字符型数字变成相应的整型数字（如’2’变为2）</h2><h3 id="字符减去-’0’-解析"><a href="#字符减去-’0’-解析" class="headerlink" title="字符减去 ’0’ 解析"></a><strong>字符减去 ’0’ 解析</strong></h3><p>​计算机中的字符包括数值、英文字母、标点符号、制表符号及其他符号。每一个字符都用一个特定的二进制代码来表示，这就是字符的编码。<br>​目前，字符编码采用的是美国信息交换标准代码，即ASCII 码 。它是用一个字节的低七位来表示一个字符的编码， 2^7 &#x3D;128 ，最高位是 0 ，所以，用 ASCII 码可表示 128 个字符）。有了这个我们就不怕我们输入的字符，计算机不懂了。于是只要我们自己在程序中输入一个字符（例如：‘a’）计算机在编译过程中自动将它转换成97的二进制码，这就是为什么说字符本质上也是整型了，因为字符变量只是告诉计算机，我这个数据只占一个字节，也就是说我超不出128这个数去。而int则告诉我这个数可能很大，有65534那么大呢</p><p>​下面就说说为什么字符减’0’可以到相应的整数。现在比如我们要字符‘1’转换成数字1，就这么一个变化，我们看到了大家注意了字符型常量用’’括起来的原因是，它们在计算机中都以各自的ASCII表示。<br>​而‘1’的对应编码是49的二进制码，但是我们的数字1，就等于1呀，所以为了由原来的‘1’实际上就是49的二进制变成现在的1对应的二进制1，只好用49-48&#x3D;1了。<br>​但是在ASCII码里‘0’对应的刚好是48的二进制码，所以我们转换的时候只需要‘1’-‘0’&#x3D;1；就可以了。而数字的ASCII码是按顺序规定的。所以其它字符要转换成数字都可以用减‘0’来表示。<br>比如‘2’的ASCII是50，而我们要得到数字2，于是用‘2’-48&#x3D;2了。看来当我们知道数据在计算机中的存储规则的时候，问题就迎刃而解了。<br>​大小写字母的转换：先看ASCII码：a ~ z是 97~ 122的二进制，而A ~ Z 是65~90的二进制编码，于是我们就得出：大写字母&#x3D;小写字母-32 ；这个公式了。当然这里的32我也可以这么写‘Z’&#x3D;‘z’-‘空格’。因为空格的ASCII码是32对应的二进制编码。</p><p><img src="/C++%E7%AC%94%E8%AE%B0.assets/image-20230414111104135.png" alt="image-20230414111104135"></p><h3 id="string类型和int类型之间的相互转换"><a href="#string类型和int类型之间的相互转换" class="headerlink" title="string类型和int类型之间的相互转换"></a><strong>string类型和int类型之间的相互转换</strong></h3><p><a href="https://blog.csdn.net/qq_45812934/article/details/123648271">https://blog.csdn.net/qq_45812934/article/details/123648271</a></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="/C++%E7%AC%94%E8%AE%B0.assets/image-20230424112944750.png" alt="image-20230424112944750"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//利用冒泡排序实现升序排列</span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">9</span>] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span> &#125;;<br>cout &lt;&lt; <span class="hljs-string">&quot;排序前：&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-comment">//开始冒泡排序</span><br><span class="hljs-comment">//总共排序轮数为 元素个数-1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span> - <span class="hljs-number">1</span>; i++)<br>&#123;<br><span class="hljs-comment">//每轮对比 次数=元素个数-当前轮数-1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">9</span> - i - <span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-comment">//如果前一个元素比后一个大，那么就交换二者</span><br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-type">int</span> temp;<br>temp = arr[j];<br>arr[j] = arr[j + <span class="hljs-number">1</span>];<br>arr[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//排序后的结果</span><br>cout &lt;&lt; <span class="hljs-string">&quot;排序后：&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="侯捷C-上"><a href="#侯捷C-上" class="headerlink" title="侯捷C++上"></a>侯捷C++上</h1><h2 id="1-头文件与类的声明"><a href="#1-头文件与类的声明" class="headerlink" title="1. 头文件与类的声明"></a>1. 头文件与类的声明</h2><h3 id="头文件的写法"><a href="#头文件的写法" class="headerlink" title="头文件的写法"></a>头文件的写法</h3><p>防卫式声明</p><p>complex.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __COMPLEX__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __COMPLEX__</span><br><br>...<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2. 构造函数"></a>2. 构造函数</h2><p><strong>构造函数：</strong>创建一个对象的时候会自动调用的一个函数 </p><p><img src="/C++%E7%AC%94%E8%AE%B0.assets/image-20230523161042705.png" alt="image-20230523161042705"></p><p>这里的complex函数是复数函数，有实部和虚部。</p><p>不带指针的类多数不用写虚构函数。</p><h2 id="3-参数传递与返回值"><a href="#3-参数传递与返回值" class="headerlink" title="3. 参数传递与返回值"></a>3. 参数传递与返回值</h2><h3 id="常量成员函数（const-member-functions）"><a href="#常量成员函数（const-member-functions）" class="headerlink" title="常量成员函数（const member functions）"></a>常量成员函数（const member functions）</h3><img src="C++笔记.assets/image-20230523163358919.png" alt="image-20230523163358919" style="zoom: 67%;" /><p>如果complex类中忘记用const修饰成员函数，则说明有可能改数据；而上图右下角应用的时候，使用const修饰变数，说明不让改数据，和类中的矛盾，编译器会报错。</p><h3 id="参数传递：pass-by-value-VS-pass-by-reference-to-const"><a href="#参数传递：pass-by-value-VS-pass-by-reference-to-const" class="headerlink" title="参数传递：pass by  value   VS   pass by reference(to const)"></a>参数传递：pass by  value   VS   pass by reference(to const)</h3><p>reference:引用（主要用来参数传递和返回值传递）</p><p>传引用在底层相当于传指针，比传值要快得多，所以<strong>尽量</strong>传引用。</p><img src="C++笔记.assets/image-20230523165802461.png" alt="image-20230523165802461" style="zoom: 67%;" /><h3 id="返回值传递：return-by-value-VS-return-by-reference-to-const"><a href="#返回值传递：return-by-value-VS-return-by-reference-to-const" class="headerlink" title="返回值传递：return by  value   VS   return by reference(to const)"></a>返回值传递：return by  value   VS   return by reference(to const)</h3><img src="C++笔记.assets/image-20230523170138886.png" alt="image-20230523170138886" style="zoom:67%;" /><h3 id="friend（友元）"><a href="#friend（友元）" class="headerlink" title="friend（友元）"></a>friend（友元）</h3><ul><li>友元函数可以访问private成员</li></ul><img src="C++笔记.assets/image-20230523170706759.png" alt="image-20230523170706759" style="zoom:67%;" /><ul><li>同一个class的各个objects互为friends（友元）</li></ul><img src="C++笔记.assets/image-20230523171332244.png" alt="image-20230523171332244" style="zoom:50%;" /><h3 id="class-body外的各种定义-definitions"><a href="#class-body外的各种定义-definitions" class="headerlink" title="class body外的各种定义(definitions)"></a>class body外的各种定义(definitions)</h3><p>第一参数ths将会被改动</p><p>第二参数r不会被改动</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">inline</span> complex&amp;<br>__doapl (complex* ths, <span class="hljs-type">const</span> complex&amp; r)<br>&#123;<br>    ths-&gt;re += r.re;<br>    ths-&gt;im += r.im;<br>    <span class="hljs-keyword">return</span> *ths;<br>&#125;<br><br><span class="hljs-keyword">inline</span> complex&amp;<br>complex::<span class="hljs-keyword">operator</span> += (<span class="hljs-type">const</span> complex&amp; r)<br>&#123;<br>    <span class="hljs-keyword">return</span> __doapl (<span class="hljs-keyword">this</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>何时不能return by reference?</li></ul><p>如果必须在函数里面创建一个变量，来存储运算结果，这时候不能return引用(reference)。【理由：当该函数结束之时，创建的这个变量就没有了，你再将这个引用传出去，这是不对的】</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文章2</title>
    <link href="/2023/05/25/%E6%96%87%E7%AB%A02/"/>
    <url>/2023/05/25/%E6%96%87%E7%AB%A02/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文章1</title>
    <link href="/2023/05/24/%E6%96%87%E7%AB%A01/"/>
    <url>/2023/05/24/%E6%96%87%E7%AB%A01/</url>
    
    <content type="html"><![CDATA[<p>测试一下子~</p><p>为啥子浏览量一直是0呢，评论好像也不能用</p><img src="/2023/05/24/%E6%96%87%E7%AB%A01/%E5%8A%A8%E7%94%BB%E5%94%AF%E7%BE%8E.jpeg" class="" title="图片引用方法一"><p><img src="/images/test.jpeg" alt="图片引用方法二" title="唯美"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/24/hello-world/"/>
    <url>/2023/05/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
